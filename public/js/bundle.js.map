{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://trading-risk-game-ts-fixed/./client/src/script.ts"],"sourcesContent":["import { Position, UserSettings, ApiResponse, ProfitCalculation } from '../../src/types/shared';\n\nclass TradingRiskGame {\n  private positions: Position[] = [];\n  private settings: UserSettings = {\n    risk_per_position: 1,\n    reward_ratio: 2,\n    tutorial_completed: false,\n    tutorial_skipped_forever: false\n  };\n\n  private gridElement!: HTMLElement;\n  private statsElement!: HTMLElement;\n  private settingsElement!: HTMLElement;\n  private messageElement!: HTMLElement;\n\n  constructor() {\n    this.init();\n  }\n\n  private async init(): Promise<void> {\n    try {\n      await this.loadData();\n      this.initializeDOM();\n      this.renderGrid();\n      this.updateStats();\n      this.checkTutorial();\n    } catch (error) {\n      console.error('Failed to initialize game:', error);\n      this.showError('Failed to load game data');\n    }\n  }\n\n  private async loadData(): Promise<void> {\n    try {\n      const [positionsResponse, settingsResponse] = await Promise.all([\n        fetch('/api/positions'),\n        fetch('/api/settings')\n      ]) as any;\n\n      if (!positionsResponse.ok || !settingsResponse.ok) {\n        throw new Error('Failed to fetch data');\n      }\n\n      const positionsData: ApiResponse<Position[]> = await positionsResponse.json();\n      const settingsData: ApiResponse<UserSettings> = await settingsResponse.json();\n\n      if (positionsData.success && positionsData.data) {\n        this.positions = positionsData.data;\n      }\n\n      if (settingsData.success && settingsData.data) {\n        this.settings = settingsData.data;\n      }\n    } catch (error) {\n      console.error('Error loading data:', error);\n      throw error;\n    }\n  }\n\n  private initializeDOM(): void {\n    this.gridElement = document.getElementById('positions-grid')!;\n    this.statsElement = document.getElementById('stats')!;\n    this.settingsElement = document.getElementById('settings')!;\n    this.messageElement = document.getElementById('motivational-message')!;\n\n    // Setup event listeners\n    document.getElementById('reset-positions')?.addEventListener('click', () => {\n      this.resetAllPositions();\n    });\n\n    document.getElementById('save-settings')?.addEventListener('click', () => {\n      this.saveSettings();\n    });\n\n    document.getElementById('show-tutorial')?.addEventListener('click', () => {\n      this.startTutorial();\n    });\n  }\n\n  private renderGrid(): void {\n    this.gridElement.innerHTML = '';\n\n    this.positions.forEach(position => {\n      const card = document.createElement('div');\n      card.className = `position-card ${position.result}`;\n      card.textContent = position.id.toString();\n\n      card.addEventListener('click', () => {\n        this.togglePosition(position.id);\n      });\n\n      this.gridElement.appendChild(card);\n    });\n  }\n\n  private async togglePosition(id: number): Promise<void> {\n    const position = this.positions.find(p => p.id === id);\n    if (!position) return;\n\n    const states = ['none', 'take', 'stop'] as const;\n    const currentIndex = states.indexOf(position.result);\n    const nextState = states[(currentIndex + 1) % states.length];\n\n    try {\n      const response = await fetch(`/api/positions/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ result: nextState })\n      });\n\n      if (response.ok) {\n        position.result = nextState;\n        this.renderGrid();\n        this.updateStats();\n      }\n    } catch (error) {\n      console.error('Error updating position:', error);\n      this.showError('Failed to update position');\n    }\n  }\n\n  private updateStats(): void {\n    const calculation = this.calculateProfit();\n\n    this.statsElement.innerHTML = `\n      <div class=\"stat-item\">\n        <span class=\"stat-label\">–¢–µ–π–∫–∏:</span>\n        <span class=\"stat-value take\">${calculation.takes}</span>\n      </div>\n      <div class=\"stat-item\">\n        <span class=\"stat-label\">–°—Ç–æ–ø–∏:</span>\n        <span class=\"stat-value stop\">${calculation.stops}</span>\n      </div>\n      <div class=\"stat-item\">\n        <span class=\"stat-label\">–ü—Ä–∏–±—É—Ç–æ–∫:</span>\n        <span class=\"stat-value\" style=\"color: ${calculation.color}\">${calculation.totalProfit}%</span>\n      </div>\n      <div class=\"stat-item\">\n        <span class=\"stat-label\">Win-rate:</span>\n        <span class=\"stat-value\">${calculation.winRate}%</span>\n      </div>\n    `;\n\n    this.updateMotivationalMessage(calculation);\n  }\n\n  private calculateProfit(): ProfitCalculation {\n    const takes = this.positions.filter(p => p.result === 'take').length;\n    const stops = this.positions.filter(p => p.result === 'stop').length;\n\n    const totalProfit = (takes * this.settings.reward_ratio) + (stops * -this.settings.risk_per_position);\n    const totalPositions = takes + stops;\n    const winRate = totalPositions > 0 ? Math.round((takes / totalPositions) * 100) : 0;\n\n    let profitLevel = 'break-even';\n    let color = '#ff9500';\n\n    if (totalProfit > 0) {\n      if (totalProfit >= 12) {\n        profitLevel = 'champion';\n        color = '#00ff00';\n      } else if (totalProfit >= 9) {\n        profitLevel = 'excellent';\n        color = '#32cd32';\n      } else if (totalProfit >= 6) {\n        profitLevel = 'great';\n        color = '#90ee90';\n      } else {\n        profitLevel = 'good';\n        color = '#98fb98';\n      }\n    } else if (totalProfit < 0) {\n      profitLevel = 'loss';\n      color = '#ff4444';\n    }\n\n    return {\n      takes,\n      stops,\n      totalProfit: Math.round(totalProfit * 100) / 100,\n      winRate,\n      profitLevel,\n      color\n    };\n  }\n\n  private updateMotivationalMessage(calculation: ProfitCalculation): void {\n    const messages = {\n      'champion': 'üèÜ –ß–µ–º–ø—ñ–æ–Ω—Å—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º!',\n      'excellent': '‚≠ê –í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∞—à–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–ª–æ–¥–∏!',\n      'great': 'üëç –ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó!',\n      'good': 'üìà –î–æ–±—Ä–µ! –í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!',\n      'break-even': '‚öñÔ∏è –ë–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å - —Ü–µ —Ç–µ–∂ —É—Å–ø—ñ—Ö! –°—Ç–æ–ø–∏ –∑–∞—Ö–∏—â–∞—é—Ç—å –∫–∞–ø—ñ—Ç–∞–ª!',\n      'loss': 'üí™ –ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –°—Ç–æ–ø–∏ - —Ü–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –º–∞–π–±—É—Ç–Ω—é –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å!'\n    };\n\n    this.messageElement.textContent = messages[calculation.profitLevel || 'break-even'] as string\n    this.messageElement.style.color = calculation.color as string;\n  }\n\n  private async resetAllPositions(): Promise<void> {\n    try {\n      const response = await fetch('/api/positions/reset', { method: 'POST' });\n\n      if (response.ok) {\n        this.positions.forEach(p => p.result = 'none');\n        this.renderGrid();\n        this.updateStats();\n      }\n    } catch (error) {\n      console.error('Error resetting positions:', error);\n      this.showError('Failed to reset positions');\n    }\n  }\n\n  private async saveSettings(): Promise<void> {\n    const riskInput = document.getElementById('risk-input') as HTMLInputElement;\n    const ratioInput = document.getElementById('ratio-input') as HTMLInputElement;\n\n    const newSettings = {\n      risk_per_position: parseFloat(riskInput.value) || this.settings.risk_per_position,\n      reward_ratio: parseFloat(ratioInput.value) || this.settings.reward_ratio\n    };\n\n    try {\n      const response = await fetch('/api/settings', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newSettings)\n      });\n\n      if (response.ok) {\n        this.settings = { ...this.settings, ...newSettings };\n        this.updateStats();\n        this.showSuccess('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');\n      }\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      this.showError('Failed to save settings');\n    }\n  }\n\n  private checkTutorial(): void {\n    if (!this.settings.tutorial_completed && !this.settings.tutorial_skipped_forever) {\n      this.showTutorialModal();\n    }\n  }\n\n  private showTutorialModal(): void {\n    // Implementation for tutorial modal\n    // This would show the tutorial introduction modal\n  }\n\n  private startTutorial(): void {\n    // Implementation for guided tutorial\n  }\n\n  private showError(message: string): void {\n    // Show error message to user\n    console.error(message);\n  }\n\n  private showSuccess(message: string): void {\n    // Show success message to user\n    console.log(message);\n  }\n}\n\n// Initialize the game when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new TradingRiskGame();\n});"],"names":["TradingRiskGame","constructor","positions","settings","risk_per_position","reward_ratio","tutorial_completed","tutorial_skipped_forever","this","init","loadData","initializeDOM","renderGrid","updateStats","checkTutorial","error","console","showError","positionsResponse","settingsResponse","Promise","all","fetch","ok","Error","positionsData","json","settingsData","success","data","gridElement","document","getElementById","statsElement","settingsElement","messageElement","addEventListener","resetAllPositions","saveSettings","startTutorial","innerHTML","forEach","position","card","createElement","className","result","textContent","id","toString","togglePosition","appendChild","find","p","states","currentIndex","indexOf","nextState","length","method","headers","body","JSON","stringify","calculation","calculateProfit","takes","stops","color","totalProfit","winRate","updateMotivationalMessage","filter","totalPositions","Math","round","profitLevel","style","riskInput","ratioInput","newSettings","parseFloat","value","showSuccess","showTutorialModal","message","log"],"sourceRoot":""}