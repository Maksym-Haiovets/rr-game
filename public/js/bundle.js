(()=>{"use strict";class t{constructor(){this.positions=[],this.settings={risk_per_position:1,reward_ratio:2,tutorial_completed:!1,tutorial_skipped_forever:!1},this.init()}async init(){try{await this.loadData(),this.initializeDOM(),this.renderGrid(),this.updateStats(),this.checkTutorial()}catch(t){console.error("Failed to initialize game:",t),this.showError("Failed to load game data")}}async loadData(){try{const[t,s]=await Promise.all([fetch("/api/positions"),fetch("/api/settings")]);if(!t.ok||!s.ok)throw new Error("Failed to fetch data");const e=await t.json(),i=await s.json();e.success&&e.data&&(this.positions=e.data),i.success&&i.data&&(this.settings=i.data)}catch(t){throw console.error("Error loading data:",t),t}}initializeDOM(){this.gridElement=document.getElementById("positions-grid"),this.statsElement=document.getElementById("stats"),this.settingsElement=document.getElementById("settings"),this.messageElement=document.getElementById("motivational-message"),document.getElementById("reset-positions")?.addEventListener("click",()=>{this.resetAllPositions()}),document.getElementById("save-settings")?.addEventListener("click",()=>{this.saveSettings()}),document.getElementById("show-tutorial")?.addEventListener("click",()=>{this.startTutorial()})}renderGrid(){this.gridElement.innerHTML="",this.positions.forEach(t=>{const s=document.createElement("div");s.className=`position-card ${t.result}`,s.textContent=t.id.toString(),s.addEventListener("click",()=>{this.togglePosition(t.id)}),this.gridElement.appendChild(s)})}async togglePosition(t){const s=this.positions.find(s=>s.id===t);if(!s)return;const e=["none","take","stop"],i=e.indexOf(s.result),a=e[(i+1)%e.length];try{(await fetch(`/api/positions/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({result:a})})).ok&&(s.result=a,this.renderGrid(),this.updateStats())}catch(t){console.error("Error updating position:",t),this.showError("Failed to update position")}}updateStats(){const t=this.calculateProfit();this.statsElement.innerHTML=`\n      <div class="stat-item">\n        <span class="stat-label">–¢–µ–π–∫–∏:</span>\n        <span class="stat-value take">${t.takes}</span>\n      </div>\n      <div class="stat-item">\n        <span class="stat-label">–°—Ç–æ–ø–∏:</span>\n        <span class="stat-value stop">${t.stops}</span>\n      </div>\n      <div class="stat-item">\n        <span class="stat-label">–ü—Ä–∏–±—É—Ç–æ–∫:</span>\n        <span class="stat-value" style="color: ${t.color}">${t.totalProfit}%</span>\n      </div>\n      <div class="stat-item">\n        <span class="stat-label">Win-rate:</span>\n        <span class="stat-value">${t.winRate}%</span>\n      </div>\n    `,this.updateMotivationalMessage(t)}calculateProfit(){const t=this.positions.filter(t=>"take"===t.result).length,s=this.positions.filter(t=>"stop"===t.result).length,e=t*this.settings.reward_ratio+s*-this.settings.risk_per_position,i=t+s,a=i>0?Math.round(t/i*100):0;let o="break-even",n="#ff9500";return e>0?e>=12?(o="champion",n="#00ff00"):e>=9?(o="excellent",n="#32cd32"):e>=6?(o="great",n="#90ee90"):(o="good",n="#98fb98"):e<0&&(o="loss",n="#ff4444"),{takes:t,stops:s,totalProfit:Math.round(100*e)/100,winRate:a,profitLevel:o,color:n}}updateMotivationalMessage(t){this.messageElement.textContent={champion:"üèÜ –ß–µ–º–ø—ñ–æ–Ω—Å—å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º!",excellent:"‚≠ê –í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∞—à–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–ª–æ–¥–∏!",great:"üëç –ß—É–¥–æ–≤–æ! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó!",good:"üìà –î–æ–±—Ä–µ! –í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!","break-even":"‚öñÔ∏è –ë–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å - —Ü–µ —Ç–µ–∂ —É—Å–ø—ñ—Ö! –°—Ç–æ–ø–∏ –∑–∞—Ö–∏—â–∞—é—Ç—å –∫–∞–ø—ñ—Ç–∞–ª!",loss:"üí™ –ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –°—Ç–æ–ø–∏ - —Ü–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è –≤ –º–∞–π–±—É—Ç–Ω—é –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å!"}[t.profitLevel||"break-even"],this.messageElement.style.color=t.color}async resetAllPositions(){try{(await fetch("/api/positions/reset",{method:"POST"})).ok&&(this.positions.forEach(t=>t.result="none"),this.renderGrid(),this.updateStats())}catch(t){console.error("Error resetting positions:",t),this.showError("Failed to reset positions")}}async saveSettings(){const t=document.getElementById("risk-input"),s=document.getElementById("ratio-input"),e={risk_per_position:parseFloat(t.value)||this.settings.risk_per_position,reward_ratio:parseFloat(s.value)||this.settings.reward_ratio};try{(await fetch("/api/settings",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok&&(this.settings={...this.settings,...e},this.updateStats(),this.showSuccess("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"))}catch(t){console.error("Error saving settings:",t),this.showError("Failed to save settings")}}checkTutorial(){this.settings.tutorial_completed||this.settings.tutorial_skipped_forever||this.showTutorialModal()}showTutorialModal(){}startTutorial(){}showError(t){console.error(t)}showSuccess(t){console.log(t)}}document.addEventListener("DOMContentLoaded",()=>{new t})})();
//# sourceMappingURL=bundle.js.map