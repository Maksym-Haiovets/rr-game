"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const init_1 = require("./database/init");
const positions_1 = __importDefault(require("./routes/positions"));
const settings_1 = __importDefault(require("./routes/settings"));
const app = (0, express_1.default)();
const PORT = process.env.PORT || 3000;
// Middleware
app.use(express_1.default.json());
app.use(express_1.default.static(path_1.default.join(__dirname, '../public')));
// API Routes
app.use('/api/positions', positions_1.default);
app.use('/api/settings', settings_1.default);
// Serve the main page for all other routes (SPA support)
app.get('*', (req, res) => {
    res.sendFile(path_1.default.join(__dirname, '../public/index.html'));
});
// Initialize database and start server
async function startServer() {
    try {
        await (0, init_1.initDatabase)();
        const server = app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
        });
        // –î–æ–¥–∞–π —Ü–µ–π –±–ª–æ–∫ —Ç—É—Ç ‚ñº‚ñº‚ñº
        process.on('SIGINT', async () => {
            console.log('üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT. –ó—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤–µ—Ä...');
            server.close(async () => {
                console.log('üîí –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ. –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑ º—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î...');
                const db = await (0, init_1.getDatabase)();
                db.close(() => {
                    console.log('‚úÖ –ó º—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ');
                    process.exit(0);
                });
            });
        });
        // ‚ñ≤‚ñ≤‚ñ≤ –ö—ñ–Ω–µ—Ü—å –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É
    }
    catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}
startServer();
