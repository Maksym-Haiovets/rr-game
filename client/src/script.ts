import { Position, UserSettings, Achievement, GameState } from './types';
import { get, put, post } from './utils/api';
import { showToast } from './utils/toast';
import { updateGradeDisplay } from './modules/profitGrades';
import { initAchievements, checkAchievements, incrementClicks, updateAchievementsDisplay } from './modules/achievements';
import { tutorialManager } from './modules/tutorial';

class RiskManagementGame {
  private gameState: GameState = {
    positions: [],
    settings: {
      id: 1,
      risk_per_position: 1.0,
      reward_ratio: 2.0,
      tutorial_completed: false,
      tutorial_skipped_forever: false
    },
    achievements: [],
    stats: {
      takes: 0,
      stops: 0,
      profit: 0,
      winRate: 0
    }
  };

  async init() {
    try {
      await this.loadGameState();
      this.setupUI();
      this.checkTutorial();

      console.log('‚úÖ –ì—Ä–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥—Ä–∏:', error);
      showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏', 'error');
    }
  }

  private async loadGameState() {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
      const [positions, settings, achievements] = await Promise.all([
        get<Position[]>('/api/positions'),
        get<UserSettings>('/api/settings'),
        get<Achievement[]>('/api/achievements')
      ]);

      this.gameState.positions = positions;
      this.gameState.settings = settings;
      this.gameState.achievements = achievements;

      this.calculateStats();
      initAchievements(achievements);

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏:', error);
      throw error;
    }
  }

  private setupUI() {
    this.createPositionsGrid();
    this.updateStatsDisplay();
    this.updateSettingsUI();
    this.setupEventListeners();
    updateAchievementsDisplay();
  }

  private createPositionsGrid() {
    const grid = document.getElementById('positions-grid')!;
    grid.innerHTML = '';

    this.gameState.positions.forEach(position => {
      const card = document.createElement('div');
      card.className = `position-card ${position.result}`;
      card.textContent = position.id.toString();
      card.dataset.id = position.id.toString();

      card.addEventListener('click', () => this.handlePositionClick(position.id));

      grid.appendChild(card);
    });
  }

  private async handlePositionClick(positionId: number) {
    try {
      const position = this.gameState.positions.find(p => p.id === positionId);
      if (!position) return;

      // –¶–∏–∫–ª—ñ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
      const states: Array<'none' | 'take' | 'stop'> = ['none', 'take', 'stop'];
      const currentIndex = states.indexOf(position.result);
      const nextState = states[(currentIndex + 1) % states.length];

      // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
      await put(`/api/positions/${positionId}`, { result: nextState });

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      position.result = nextState;

      // –û–Ω–æ–≤–ª—é—î–º–æ UI
      const card = document.querySelector(`[data-id="${positionId}"]`)!;
      card.className = `position-card ${nextState}`;

      // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.calculateStats();
      this.updateStatsDisplay();

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
      incrementClicks();
      await checkAchievements(this.gameState.stats);

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó:', error);
      showToast('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó', 'error');
    }
  }

  private calculateStats() {
    const takes = this.gameState.positions.filter(p => p.result === 'take').length;
    const stops = this.gameState.positions.filter(p => p.result === 'stop').length;
    const totalPositions = takes + stops;

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É: —Ç–µ–π–∫–∏ –¥–∞—é—Ç—å +RR%, —Å—Ç–æ–ø–∏ –¥–∞—é—Ç—å -1%
    const profit = (takes * this.gameState.settings.reward_ratio) + (stops * -1);
    const winRate = totalPositions > 0 ? (takes / totalPositions) * 100 : 0;

    this.gameState.stats = {
      takes,
      stops,
      profit: parseFloat(profit.toFixed(1)),
      winRate: parseFloat(winRate.toFixed(1))
    };
  }

  private updateStatsDisplay() {
    document.getElementById('takes-count')!.textContent = this.gameState.stats.takes.toString();
    document.getElementById('stops-count')!.textContent = this.gameState.stats.stops.toString();
    document.getElementById('profit-pct')!.textContent = `${this.gameState.stats.profit}%`;
    document.getElementById('win-rate')!.textContent = `${this.gameState.stats.winRate}%`;

    // –û–Ω–æ–≤–ª—é—î–º–æ –≥—Ä–∞–¥–∞—Ü—ñ—ó –ø—Ä–∏–±—É—Ç–∫—É
    updateGradeDisplay(
      this.gameState.stats.takes,
      this.gameState.stats.stops,
      this.gameState.stats.profit
    );

    // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    this.updateMotivationMessage();
  }

  private updateMotivationMessage() {
    const msgEl = document.getElementById('motivation-msg')!;
    const { takes, stops, profit } = this.gameState.stats;

    if (takes === 0 && stops === 0) {
      msgEl.textContent = '–ü–æ—á–Ω—ñ—Ç—å —Ç–æ—Ä–≥—É–≤–∞—Ç–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!';
    } else if (profit === 0 && takes === 5 && stops === 10) {
      msgEl.textContent = '‚öñÔ∏è –Ü–¥–µ–∞–ª—å–Ω–∞ –±–µ–∑–∑–±–∏—Ç–∫–æ–≤—ñ—Å—Ç—å! –¢–µ–ø–µ—Ä —Å–ø—Ä–æ–±—É–π—Ç–µ –¥–æ—Å—è–≥—Ç–∏ –ø—Ä–∏–±—É—Ç–∫—É.';
    } else if (profit > 0) {
      msgEl.textContent = `üí∞ –ß—É–¥–æ–≤–æ! –í–∏ –≤ –ø—Ä–∏–±—É—Ç–∫—É ${profit}%. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —É —Ç–æ–º—É –∂ –¥—É—Å—ñ!`;
    } else if (profit < 0) {
      msgEl.textContent = 'üìâ –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ —Å—Ç–æ–ø–∏ - –≤–æ–Ω–∏ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó. –¢—Ä–µ–π–¥–∏–Ω–≥ - —Ü–µ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∞ –≥—Ä–∞!';
    } else {
      msgEl.textContent = '–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å!';
    }
  }

  private updateSettingsUI() {
    (document.getElementById('risk-input') as HTMLInputElement).value = 
      this.gameState.settings.risk_per_position.toString();
    (document.getElementById('reward-input') as HTMLInputElement).value = 
      this.gameState.settings.reward_ratio.toString();
  }

  private setupEventListeners() {
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    document.getElementById('save-settings')!.addEventListener('click', async () => {
      await this.saveSettings();
    });

    // –°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
    document.getElementById('reset-positions')!.addEventListener('click', async () => {
      await this.resetPositions();
    });

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–∞–π–¥
    document.getElementById('show-guide-btn')!.addEventListener('click', () => {
      tutorialManager.start();
    });

    // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ç—É—Ç–æ—Ä—ñ–∞–ª—É
    document.getElementById('start-tutorial')!.addEventListener('click', () => {
      this.hideTutorialModal();
      tutorialManager.start();
    });

    document.getElementById('skip-tutorial')!.addEventListener('click', () => {
      this.hideTutorialModal();
    });

    document.getElementById('skip-forever')!.addEventListener('click', async () => {
      try {
        await put('/api/settings', { tutorial_skipped_forever: true });
        this.gameState.settings.tutorial_skipped_forever = true;
        this.hideTutorialModal();
        showToast('–¢—É—Ç–æ—Ä—ñ–∞–ª –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞–∑–∞–≤–∂–¥–∏', 'success');
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç—É—Ç–æ—Ä—ñ–∞–ª—É:', error);
      }
    });
  }

  private async saveSettings() {
    try {
      const riskInput = document.getElementById('risk-input') as HTMLInputElement;
      const rewardInput = document.getElementById('reward-input') as HTMLInputElement;

      const risk = parseFloat(riskInput.value);
      const reward = parseFloat(rewardInput.value);

      if (risk < 0.1 || risk > 10) {
        showToast('–†–∏–∑–∏–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.1% –¥–æ 10%', 'error');
        return;
      }

      if (reward < 1 || reward > 5) {
        showToast('–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5', 'error');
        return;
      }

      await put('/api/settings', {
        risk_per_position: risk,
        reward_ratio: reward
      });

      this.gameState.settings.risk_per_position = risk;
      this.gameState.settings.reward_ratio = reward;

      // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
      this.calculateStats();
      this.updateStatsDisplay();

      showToast('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
      showToast('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'error');
    }
  }

  private async resetPositions() {
    try {
      await post('/api/positions/reset', {});

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      this.gameState.positions.forEach(p => p.result = 'none');

      this.createPositionsGrid();
      this.calculateStats();
      this.updateStatsDisplay();

      showToast('–í—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó —Å–∫–∏–Ω—É—Ç—ñ!', 'success');

    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
      showToast('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π', 'error');
    }
  }

  private checkTutorial() {
    if (!this.gameState.settings.tutorial_completed && 
        !this.gameState.settings.tutorial_skipped_forever) {
      this.showTutorialModal();
    }
  }

  private showTutorialModal() {
    const modal = document.getElementById('tutorial-modal')!;
    modal.classList.add('show');
  }

  private hideTutorialModal() {
    const modal = document.getElementById('tutorial-modal')!;
    modal.classList.remove('show');
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
  const game = new RiskManagementGame();
  game.init();
});